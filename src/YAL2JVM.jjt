options{	LOOKAHEAD = 1;}PARSER_BEGIN(YAL2JVM)
public class YAL2JVM{   public static void main(String args [])   {    	YAL2JVM myYAL2JVM = new YAL2JVM(System.in);    	SimpleNode root = null;		try {			root = myYAL2JVM.Module();		} catch (ParseException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}    	root.dump("");   }}PARSER_END(YAL2JVM)<DEFAULT> SKIP:{	" "	| "\t"	| "\n"	| "\r"	| <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>	| <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">}/* reserved words */<DEFAULT> TOKEN :{	<RELA_OP: ">" | "<" | "<=" | ">=" | "==" | "!=">	| <ADDSUB_OP: "+" | "-">	| <ARITH_OP: "*" | "/" | "<<" | ">>" | ">>>">	| <BITWISE_OP: "&" | "|" | "^">	| <NOT_OP: "!">	| <WHILE: "while">	| <IF: "if">	| <ELSE: "else">	| <ASSIGN: "=">	| <ASPA: "\"">	| <LPAR: "(">	| <RPAR: ")">	| <VIRG: ",">	| <PVIRG: ";">	| <LCHAVETA: "{">	| <RCHAVETA: "}">	| <FUNCTION: "function">	| <MODULE: "module">	| <SIZE: "size">}<DEFAULT> TOKEN :{	<INTEGER: (<DIGIT>)+>	| <ID: <LETTER> (<LETTER> | <DIGIT>)*>	| <#LETTER: ["$","A"-"Z","_","a"-"z"]>	| <#DIGIT: ["0"-"9"]>	| <STRING: "\"" (["a"-"z","A"-"Z","0"-"9",":"," ","="])+ "\"">}SimpleNode Module() #Module: { Token moduleId; }{	< MODULE > moduleId = < ID > { jjtThis.ID = moduleId.image; } <LCHAVETA >	( Declaration())* < RCHAVETA >   	{ return jjtThis; }}void Declaration() #Declaration: { Token assign; }{	LeftSide() (assign=<ASSIGN> { jjtThis.ID = assign.image; } RightSide())? <PVIRG>}void LeftSide() #void: {}{	LOOKAHEAD(2) ArrayElement() | ScalarElement()}void RightSide() #GlobalRight: { Token op, intID; }{	("[" ArraySize() "]")  | 	((op=<ADDSUB_OP> {jjtThis.ID = op.image;})?	intID=<INTEGER> {		if (jjtThis.ID != null)			jjtThis.ID += intID.image;		else			jjtThis.ID = intID.image;	})}