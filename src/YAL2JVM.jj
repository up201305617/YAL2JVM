/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. YAL2JVM.jj */
/*@egen*/options{	LOOKAHEAD = 1;}PARSER_BEGIN(YAL2JVM)import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.File;import java.io.UnsupportedEncodingException;
public class YAL2JVM/*@bgen(jjtree)*/implements YAL2JVMTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTYAL2JVMState jjtree = new JJTYAL2JVMState();

/*@egen*/   private static Module module;   private static int numErrors = 0;   private static boolean hasErrors = false;   private static Generator generator;      public static void main(String args [])   {		if(args.length < 1)		{			System.out.println("Usage: java YAL2JVM <filename>.yal");			return;		}		if(args.length == 2)		{			if(args[1].equals("-r") || args[1].equals("-o"))		  		System.out.println("A op\u00e7\u00e3o -r e -o ainda n\u00e3o foram implementadas.");		  	else		  		System.out.println("A op\u00e7\u00e3o "+args[1]+" n\u00e3o \u00e9 reconhecida pelo YAL2JVM.");		}    	YAL2JVM myYAL2JVM = null;		try		{			myYAL2JVM = new YAL2JVM(new FileInputStream(args[0]));		}		catch (FileNotFoundException e1)		{			e1.printStackTrace();		}    	SimpleNode root = null;		try		{			root = myYAL2JVM.Module();			module = new Module(root.ID, root);		}		catch (ParseException e)		{			e.printStackTrace();		}				System.out.println("\n");		System.out.println("M\u00f3dulo a analisar "+root.ID+"\n");		GetFromSimpleNode.getGlobalVariables(root,module);    	root.analyseGlobals();    	    	System.out.println("O m\u00f3dulo "+root.ID+" tem "+numErrors+" erros!");    	    	GetFromSimpleNode.getFunctions(root,module);    	System.out.println("============================");    	module.analyseFunctions();    	System.out.println("============================");    	if(!hasErrors)    	{    	  System.out.println("A Iniciar o Gerador JVM: ");    	  generator = new Generator(module,root.ID);    	  generator.initiateGeneration();    	  System.out.println("A gera\u00e7\u00e3o de c\u00f3digo JVM foi concluida com sucesso.");   		}   		else   		{   		  System.out.println("O m\u00f3dulo " + root.ID + " possui erros semanticos.");   		  System.out.println("N\u00e3o \u00e9 por isso poss\u00edvel gerar o c\u00f3digo JVM.");   		}   		try   		{			Utils.createLogFile(root.ID);		}		catch (FileNotFoundException e)		{			e.printStackTrace();		}		catch (UnsupportedEncodingException e)		{			e.printStackTrace();		}		   		System.out.println("Foi criado um ficheiro .log com os resultados da an\u00e1lise.");   }   public static Module getModule()   {		return module;   }   public static void incErrors()   {     	numErrors++;   }   public static void errorFound()   {     	hasErrors = true;   }}PARSER_END(YAL2JVM)<DEFAULT> SKIP:{	" "	| "\t"	| "\n"	| "\r"	| <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>	| <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">}/* reserved words */<DEFAULT> TOKEN :{	<RELA_OP: ">" | "<" | "<=" | ">=" | "==" | "!=">	| <ADDSUB_OP: "+" | "-">	| <ARITH_OP: "*" | "/" | "<<" | ">>" | ">>>">	| <BITWISE_OP: "&" | "|" | "^">	| <NOT_OP: "!">	| <WHILE: "while">	| <IF: "if">	| <ELSE: "else">	| <ASSIGN: "=">	| <ASPA: "\"">	| <LPAR: "(">	| <RPAR: ")">	| <VIRG: ",">	| <PVIRG: ";">	| <LCHAVETA: "{">	| <RCHAVETA: "}">	| <FUNCTION: "function">	| <MODULE: "module">	| <SIZE: "size">}<DEFAULT> TOKEN :{	<INTEGER: (<DIGIT>)+>	| <ID: <LETTER> (<LETTER> | <DIGIT>)*>	| <#LETTER: ["$","A"-"Z","_","a"-"z"]>	| <#DIGIT: ["0"-"9"]>	| <STRING: "\"" (["a"-"z","A"-"Z","0"-"9",":"," ","="])+ "\"">}SimpleNode Module()        : {/*@bgen(jjtree) Module */
                               SimpleNode jjtn000 = new SimpleNode(JJTMODULE);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);
/*@egen*/ Token moduleId; }{/*@bgen(jjtree) Module */
        try {
/*@egen*/	< MODULE > moduleId = < ID > { jjtn000.ID = moduleId.image; } <LCHAVETA >	( Declaration())* (Function())* < RCHAVETA >/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/   	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void Declaration()             : {/*@bgen(jjtree) Declaration */
                                   SimpleNode jjtn000 = new SimpleNode(JJTDECLARATION);
                                   boolean jjtc000 = true;
                                   jjtree.openNodeScope(jjtn000);
/*@egen*/ Token assign; }{/*@bgen(jjtree) Declaration */
        try {
/*@egen*/	LeftSide() (assign=<ASSIGN> { jjtn000.ID = assign.image; } RightSide())? <PVIRG>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void LeftSide()      : {}{	LOOKAHEAD(2) ArrayElement() | ScalarElement()}void Function()          : {/*@bgen(jjtree) Function */
                             SimpleNode jjtn000 = new SimpleNode(JJTFUNCTION);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/ Token functionID; }{/*@bgen(jjtree) Function */
        try {
/*@egen*/	<FUNCTION> (LOOKAHEAD(3) Return())? functionID=<ID> {		jjtn000.ID = functionID.image;	} <LPAR> (Varlist())? <RPAR> <LCHAVETA> FunctionBody() <RCHAVETA>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void Return()        : {/*@bgen(jjtree) Return */
  SimpleNode jjtn000 = new SimpleNode(JJTRETURN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Return */
        try {
/*@egen*/	(LOOKAHEAD(2) ArrayElement() | ScalarElement()) <ASSIGN>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void Varlist()         : {/*@bgen(jjtree) Varlist */
  SimpleNode jjtn000 = new SimpleNode(JJTVARLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Varlist */
        try {
/*@egen*/	(LOOKAHEAD(2) ArrayElement() | ScalarElement()) (<VIRG> (LOOKAHEAD(2) ArrayElement() | ScalarElement()))*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void ArrayElement()       : {/*@bgen(jjtree) Array */
                              SimpleNode jjtn000 = new SimpleNode(JJTARRAY);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);
/*@egen*/ Token arrayId; }{/*@bgen(jjtree) Array */
        try {
/*@egen*/	arrayId=<ID> {jjtn000.ID = arrayId.image;} "[" "]"/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void ScalarElement()        : {/*@bgen(jjtree) Scalar */
                                SimpleNode jjtn000 = new SimpleNode(JJTSCALAR);
                                boolean jjtc000 = true;
                                jjtree.openNodeScope(jjtn000);
/*@egen*/ Token scalarId; }{/*@bgen(jjtree) Scalar */
        try {
/*@egen*/	scalarId=<ID>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ {jjtn000.ID = scalarId.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void Stmtlst()      : {}{	(Stmt())*}void Stmt()      : {}{	While() | If() | LOOKAHEAD(3) Assign() | Call() <PVIRG>}void Assign()             : {/*@bgen(jjtree) Assignement */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGNEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Assignement */
        try {
/*@egen*/	Lhs() <ASSIGN> Rhs() <PVIRG>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void Lhs()      : {}{	LOOKAHEAD(2) ArrayAccess() | ScalarAccess()}void Rhs()     : {/*@bgen(jjtree) Rhs */
                  SimpleNode jjtn000 = new SimpleNode(JJTRHS);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token op;}{/*@bgen(jjtree) Rhs */
        try {
/*@egen*/	(Term() ((op=<ARITH_OP> {jjtn000.ID = op.image;} |			 op=<BITWISE_OP> {jjtn000.ID = op.image;} |			 op=<ADDSUB_OP> {jjtn000.ID = op.image;}) Term())?) |			 "[" ArraySize() "]"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void RightSide()           : {/*@bgen(jjtree) RightSide */
                               SimpleNode jjtn000 = new SimpleNode(JJTRIGHTSIDE);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);
/*@egen*/ Token op, intID; }{/*@bgen(jjtree) RightSide */
        try {
/*@egen*/	("[" ArraySize() "]")  | 	((op=<ADDSUB_OP> {jjtn000.ID = op.image;})?	intID=<INTEGER>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {		if (jjtn000.ID != null)			jjtn000.ID += intID.image;		else			jjtn000.ID = intID.image;	})/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void ArraySize()           : {/*@bgen(jjtree) ArraySize */
                               SimpleNode jjtn000 = new SimpleNode(JJTARRAYSIZE);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);
/*@egen*/ Token intID; }{/*@bgen(jjtree) ArraySize */
        try {
/*@egen*/	ScalarAccess() | intID=<INTEGER>/*@bgen(jjtree)*/
                                         {
                                           jjtree.closeNodeScope(jjtn000, true);
                                           jjtc000 = false;
                                         }
/*@egen*/ { jjtn000.ID = intID.image; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void Term()      : {/*@bgen(jjtree) Term */
                     SimpleNode jjtn000 = new SimpleNode(JJTTERM);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
/*@egen*/ Token op, intId; }{/*@bgen(jjtree) Term */
        try {
/*@egen*/	(op=<ADDSUB_OP> {jjtn000.ID = op.image;})?	(intId=<INTEGER>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/	{		if (jjtn000.ID != null)			jjtn000.ID += intId.image;		else			jjtn000.ID = intId.image;	}	| LOOKAHEAD(3) Call() | LOOKAHEAD(2) ArrayAccess() | ScalarAccess())/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void Exprtest()          : {/*@bgen(jjtree) Exprtest */
                             SimpleNode jjtn000 = new SimpleNode(JJTEXPRTEST);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/ Token op; }{/*@bgen(jjtree) Exprtest */
        try {
/*@egen*/	< LPAR > Lhs() op= <RELA_OP> { jjtn000.ID = op.image; } Rhs() <RPAR>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void While()       : {/*@bgen(jjtree) While */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) While */
        try {
/*@egen*/	<WHILE> Exprtest() <LCHAVETA> WhileBody() <RCHAVETA>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void If()    : {/*@bgen(jjtree) If */
  SimpleNode jjtn000 = new SimpleNode(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) If */
        try {
/*@egen*/	<IF> Exprtest() <LCHAVETA> IfBody() <RCHAVETA> (<ELSE> <LCHAVETA> ElseBody() <RCHAVETA>)?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void Call()      : {/*@bgen(jjtree) Call */
                     SimpleNode jjtn000 = new SimpleNode(JJTCALL);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
/*@egen*/ Token id, callID; }{/*@bgen(jjtree) Call */
        try {
/*@egen*/	id=<ID> {jjtn000.ID = id.image;} ("." callID=<ID> {jjtn000.ID += "." + callID.image; })?	<LPAR> (ArgumentList())? <RPAR>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void ArgumentList()      : {}{	Argument() (<VIRG> Argument())*}void Argument()          : {/*@bgen(jjtree) Argument */
                             SimpleNode jjtn000 = new SimpleNode(JJTARGUMENT);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/ Token arg; }{/*@bgen(jjtree) Argument */
        try {
/*@egen*/	arg=<ID>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {jjtn000.ID = arg.image;}	| arg=<STRING>/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/ {jjtn000.ID = arg.image;}	| arg=<INTEGER>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {	jjtn000.ID = arg.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void ArrayAccess()             : {/*@bgen(jjtree) ArrayAccess */
                                   SimpleNode jjtn000 = new SimpleNode(JJTARRAYACCESS);
                                   boolean jjtc000 = true;
                                   jjtree.openNodeScope(jjtn000);
/*@egen*/ Token arrayID; }{/*@bgen(jjtree) ArrayAccess */
        try {
/*@egen*/	arrayID=<ID> { jjtn000.ID = arrayID.image; } "[" Index() "]"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void ScalarAccess()              : {/*@bgen(jjtree) ScalarAccess */
                                     SimpleNode jjtn000 = new SimpleNode(JJTSCALARACCESS);
                                     boolean jjtc000 = true;
                                     jjtree.openNodeScope(jjtn000);
/*@egen*/ Token scalarID, size; }{/*@bgen(jjtree) ScalarAccess */
        try {
/*@egen*/	scalarID=<ID>	{		jjtn000.ID = scalarID.image;	} ("." size=<SIZE>	{		jjtn000.ID += "." + size.image;	})?/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void Index()       : {/*@bgen(jjtree) Index */
                       SimpleNode jjtn000 = new SimpleNode(JJTINDEX);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/ Token id, intID; }{/*@bgen(jjtree) Index */
        try {
/*@egen*/	id=<ID>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ {jjtn000.ID = id.image;} | intID=<INTEGER>/*@bgen(jjtree)*/
                                                           {
                                                             jjtree.closeNodeScope(jjtn000, true);
                                                             jjtc000 = false;
                                                           }
/*@egen*/ {jjtn000.ID = intID.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void FunctionBody()              : {/*@bgen(jjtree) FunctionBody */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCTIONBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) FunctionBody */
        try {
/*@egen*/	Stmtlst()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void WhileBody()           : {/*@bgen(jjtree) WhileBody */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILEBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) WhileBody */
        try {
/*@egen*/	(Stmt())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void IfBody()        : {/*@bgen(jjtree) IfBody */
  SimpleNode jjtn000 = new SimpleNode(JJTIFBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) IfBody */
        try {
/*@egen*/	Stmtlst()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void ElseBody()          : {/*@bgen(jjtree) ElseBody */
  SimpleNode jjtn000 = new SimpleNode(JJTELSEBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ElseBody */
        try {
/*@egen*/	Stmtlst()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}